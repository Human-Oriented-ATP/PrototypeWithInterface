The library file has become quite large, so for convenience I am starting a new one. The previous file contains basics about sets, functions, relations, and binary operations. This one will focus more on the natural numbers, but it will include some material about sets that cannot be done without the natural numbers, such as giving a meaning to an ordered n-tuple or the intersection of n sets. I am thinking of these two files as being an attempt to teach the program much of the content of Cambridge's IA Numbers and Sets course.

Comment: I don't want to keep typing \mathbb{N}, so I'm going to type \N. We can always do a global search and replace later if we want to, but actually I think it would be good to define \N to mean the natural numbers.

Comment: At the risk of infuriating half the world, I'm going to take the natural numbers to be the set \{1,2,3,...\}

Comment: I am no longer going to write (*****) to indicate that a name is needed, since that will be universally true for the moment.

As far as possible, I am adopting the following conventions when giving a name to a result. (1) I use abbreviations that are as obvious as I can make them, such as "comm" for "commutative" etc. (2) I join a small number of such abbreviations with underscores. (3) I put the abbreviations I use in the following order: the object that's being talked about, any "decorations" that might accompany it, what property it has, what the context is, and any tags I might want to say what type of entry we have. For example, the statement that < on the natural numbers is named (lessthan_trans_nat) because it's about the relation <, the property it is said to have is transitivity, and the context is the natural numbers. The definition of the relation \leq on the natural numbers is named (leq_nat_def). The statement that the natural numbers with \leq is a woset is (nat_leq_woset) because here \leq is a "decoration" of the set of natural numbers. 



NATURAL NUMBER BASICS -- PEANO AXIOMS

"1 is a natural number"  (1_nat)

Then 1 \in \N


"Every natural number has a successor"  (nat_succ)

Then \forall n\in\N  \sigma(n)\in\N


"Every natural number has a successor -- higher level"  (succ_fn)

Then \sigma:\N\to\N


"The successor function is injective"  (succ_inj)

Then \forall m\in\N \forall n\in\N  \sigma(m) = \sigma(n) \implies m = n


"Every natural number apart from 1 has a predecessor"  (nat_predec)

Then n \ne 1 \implies \exists m  \sigma(m) = n


"1 does not have a predecessor"  (1_no_predec)

Then n\in\N \implies \sigma(n) \ne 1


"Principle of induction"  (induction_set)

Let A be a subset of \N
Suppose 1\in A
Suppose \forall n\in\N  n\in A \implies \sigma(n)\in A
Then \forall n\in N  n\in A
Then A = \N

Comment: I gave two conclusions here, one a low-level one and the other a high-level one.

Comment: If we actually want to do Peano arithmetic, then we need A to be a set of the form \{n\in\N : P(n)\} where P is a first-order formula. However, I am seeing this as more like a "mathematician's induction", which will not be very sensitive to the kind of set. If we don't do this, then the program will have a much harder job checking that the conditions for inductive arguments apply, when usually they will. We might want to add in the first-order-induction statement and flag up this much stronger one whenever it is used.


"Principle of induction for statements"  (induction_prop)

Let P be a property on \N
Suppose P(1)
Suppose \forall n\in\N  P(n) \implies P(n+1)
Then \forall n\in\N P(n)

Comment: Again, I have not specified that P has to be a first-order property. 


"Inductive definition of a function defined on \N"  (induction_fn_nat_def)

Let X be a set
Let g:\N\times X\to X
Let x\in X
Then \existsunique f:\N\to X  f(1) = x \wedge \forall n\in\N  f(\sigma(n)) = g(n, f(n))


DEFINITION AND BASIC PROPERTIES OF ADDITION

"Definition of adding 1"  (add_1_def)

Let n\in\N
Definition: n + 1 = \sigma(n)

"Defining property of adding a successor"  (add_succ_def)

Let n\in\N
Let m\in\N
Then n + \sigma(m) = \sigma(n+m)

Comment: I am trying to make this as convenient as possible for a program to use. It might seem as though this formulation is inconvenient because it makes it difficult to expand the definition of n + m, but I think we don't usually want to do that. Typically we use all sorts of basic facts about addition, and on the rare occasions when we want to go back to the definition we typically use inductive arguments, so it's OK if it's not so easy to match n + m, since we'll in fact want to match n + \sigma(m). 

"Addition is associative"  (add_assoc_nat)

Then is_associative(+,\N)

"Addition is commutative"  (add_comm_nat)

Then is_commutative(+,\N)

"The cancellation law for addition"  (add_cancel_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a + c = b + c ⟷ a = b

Comment: I thought about putting only the forward direction here, but we do sometimes use the backward direction, and it's not quite clear to me to what extent we want to build in how the program handles equality. 


THE ORDER RELATION ON \N AND ITS BASIC PROPERTIES

"Less than relation on \N"  (lessthan_nat_def)

Let n\in\N
Let m\in\N
Definition: n < m ⟷ \exists r\in\N  m = n + r

"Less than or equal to relation on \N"  (leq_nat_def)

Let n\in\N
Let m\in\N
Definition: n \leq m ⟷ n < m \vee n = m

"Less than or equal to relation makes \N a woset"  (nat_leq_woset)

Then is_woset((\N,\leq))

"Less than or equal to relation on \N is transitive"  (leq_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n \leq m
Suppose m \leq r
Then n \leq r

"Less than relation on \N is transitive"  (lessthan_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n < m
Suppose m < r
Then n < r

"Mixed transitivity for less than on \N, strict first"  (lessthan_leq_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n < m
Suppose m \leq r
Then n < r

"Mixed transitivity for less than on \N, strict second"  (leq_lessthan_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n \leq m
Suppose m < r
Then n < r

"Definition of greater than or equal to on \N" (geq_nat_def)

Let n\in\N
Let m\in\N
Definition: n > m ⟷ m < n
Definition: n > m ⟷ \exists r\in\N n = m + r
Definition: n\geq m ⟷ n > m \vee n = m

"Greater than or equal to on \N is transitive"  (geq_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n \geq m
Suppose m \geq r
Then n \geq r

"The greater than relation on \N is transitive"  (greaterthan_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n > m
Suppose m > r
Then n > r

"Mixed transitivity for greater than on \N, strict first"  (greaterthan_geq_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n > m
Suppose m \geq r
Then n > r

"Mixed transitivity for greater than on \N, strict second"  (geq_greaterthan_trans_nat)

Let n\in\N
Let m\in\N
Let r\in\N
Suppose n \geq m
Suppose m > r
Then n > r

"Less than or equal to on \N is antisymmetric" (leq_antisymm_nat)

Let n\in\N
Let m\in\N
Suppose n\leq m \wedge m\leq n
Then n = m

"Greater than or equal to on \N is antisymmetric"  (geq_antisymm_nat)

Let n\in\N
Let m\in\N
Suppose n\geq m \wedge m\geq n
Then n = m

INTERACTION BETWEEN ADDITION AND ORDER

"Less than or equal to on \N preserved by right addition"  (leq_add_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a\leq b ⟷ a + c \leq b + c

"Less than on \N preserved by right addition"  (lessthan_add_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a < b ⟷ a + c < b + c

"Greater than or equal to on \N preserved by right addition"  (geq_add_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a\geq b ⟷ a + c \geq b + c

"Greater than on \N preserved by right addition"  (greaterthan_add_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a > b ⟷ a + c > b + c

"Less than or equal to on \N preserved by left addition"  (leq_add_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b\leq c ⟷ a + b \leq a + c

"Less than on \N preserved by left addition"  (lessthan_add_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b < c ⟷ a + b < a + c

"Greater than or equal to on \N preserved by left addition"  (geq_add_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b\geq c ⟷ a + b \geq a + c

"Greater than on \N preserved by left addition"  (greaterthan_add_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b > c ⟷ a + b > a + c


DEFINITION AND BASIC PROPERTIES OF MULTIPLICATION

"Multiplication by 1 in \N" (mult_1_nat_def)

Let a\in\N
Then a*1 = a

"Multiplication by a successor in \N" (mult_succ_nat_def)

Let a\in\N
Let b\in\N
Then a*\sigma(b) = a*b + b

Comment: I am going to assume that it's hard-wired into the program that multiplication takes precedence over addition.

"Multiplication on \N is associative" (mult_assoc_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a*(b*c) = (a*b)*c

"Multiplication on \N is commutative" (mult_comm_nat)

Let a\in\N
Let b\in\N
Then a*b = b*a

INTERACTION BETWEEN MULTIPLICATION AND ADDITION

"Multiplication left-distributes over addition on \N" (mult_add_leftdistr_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a*(b+c) = a*b + a*c

"Multiplication right-distributes over addition on \N" (mult_add_rightdistr_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then (a+b)*c = a*c + b*c


INTERACTION BETWEEN MULTIPLICATION AND ORDER

"Less than or equal to on \N preserved by right multiplication"  (leq_mult_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a\leq b ⟷ a * c \leq b * c

"Less than on \N preserved by right multiplication"  (lessthan_mult_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a < b ⟷ a * c < b * c

"Greater than or equal to on \N preserved by right multiplication"  (geq_mult_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a\geq b ⟷ a * c \geq b * c

"Greater than on \N preserved by right multiplication"  (greaterthan_mult_right_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then a > b ⟷ a * c > b * c

"Less than or equal to on \N preserved by left multiplication"  (leq_mult_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b\leq c ⟷ a * b \leq a * c

"Less than on \N preserved by left multiplication"  (lessthan_mult_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b < c ⟷ a * b < a * c

"Greater than or equal to on \N preserved by left multiplication"  (geq_mult_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b\geq c ⟷ a * b \geq a * c

"Greater than on \N preserved by left multiplication"  (greaterthan_mult_left_nat)

Let a\in\N
Let b\in\N
Let c\in\N
Then b > c ⟷ a * b > a * c


# Cardinality

FINITENESS 

"Direct definition of set of first n integers"  (initseg_nat_def)

Let n\in\N
Definition: [n] = \{x\in\N: x\leq n\}

"Inductive definition of set of first n integers" (initseg_nat_induct_def)

Then [1]=\{1\}
Then \forall n\in\N [\sigma(n)] = [n]\cup\{\sigma(n)}

"Strict order relations between initial segments"  (initseg_order_strict)

Let m\in\N
Let n\in\N
Suppose m < n
Then [m]\subsetneq [n]

"Non-strict order relations between initial segments" (initseg_order_nonstrict)

Let m\in\N
Let n\in\N
Suppose m \leq n
Then [m]\subseteq [n]

"Definition of finiteness" (set_finite_def)

Let X be a set
Definition: is_finite(X) ⟷ \exists n\in\N \exists f:X\to[n]  is_bijection(f)

"Definition of finiteness using injection" (set_finite_inj_def)

Let X be a set
Then is_finite(X) ⟷ \exists f:X\to[n]  is_injection(f)

"Definition of finiteness using surjection"  (set_finite_surj_def)

Let X be a set
Then is_finite(X) ⟷ \exists f:[n]\to X  is_surjection(f)

"A subset of a finite set is finite"  (subset_finite)

Let A be a set
Let B be a set
Suppose is_finite(A)
Suppose B\subset A
Then is_finite(B)

Comment: normally I like my sets to be subsets of some ground set, but for this result that does not feel natural.

"A set that injects into a finite set is finite"  (set_finite_inj_finite)

Let A be a set
Let B be a set
Let f:A\to B
Suppose is_finite(B)
Suppose is_injection(f)
Then is_finite(A)

"An image of a finite set is finite" (image_finite_finite)

Let X be a set
Let Y be a set
Let A be a subset of X
Let f:X\to Y
Suppose is_finite(A)
Then is_finite(f ` A)

"A union of two finite sets is finite" (union_finite_finite)

Let A be a set
Let B be a set
Suppose is_finite(A)
Suppose is_finite(B)
Then is_finite(A\cup B)

"A union of a finite sequence of finite sets is finite" (union_finiteseq_finite_finite)

Let X be a set
Let n\in\N
Let A:[n]\to power_set(X)
Then is_finite( \bigcup\{A(m): m\in [n]\} )

"A union of finitely many finite sets is finite" (union_finite_finite_finite)

Let X be a set
Let F be a set
Suppose is_finite(\Gamma)
Let A:\Gamma\to power_set(X)
Then is_finite( \bigcup\{A(\gamma): \gamma\in\Gamma\} )


INFINITE SETS

"Definition of infinite set"  (set_infinite_def)

Let X be a set
Definition: is_infinite(X) ⟷ \neg (is_finite(X))

"Definition of infinite set via injection"  (set_infinite_inj_def)

Let X be a set
Then is_infinite(X) ⟷ \exists f:\N\to X  is_injection(f)

Comment: This uses a form of choice. I think it probably uses dependent choice. Maybe we want to tag it accordingly.

"Definition of infinite set via surjection"  (set_infinite_surj_def)

Let X be a set
Then is_infinite(X)  ⟷  \exists f:X\to\N  is_surjection(f)

Comment: See previous comment.


COUNTABLE AND UNCOUNTABLE SETS

"Definition of countable set"  (set_countable_def)

Let X be a set
Definition: is_countable(X) ⟷ \exists f:X\to\N  is_bijection(f)

"Definition of countable set via injection"  (set_countable_inj_def)

Let X be a set
Then is_countable(X) ⟷ \exists f:X\to\N  is_injection(f)

"Definition of countable set via surjection"  (set_countable_surj_def)

Let X be a set
Then is_countable(X) ⟷ \exists f:\N\to X  is_surjection(f)

"A union of countably many countable sets is countable" (union_count_count_count)

Let X be a set
Let A:\N\to power_set(X)
Suppose \forall n\in\N  is_countable(A(n))
Then is_countable(\bigcup\{A(n): n\in\N\})

"There is no surjection from a set to its power set"  (cardinality_powerset_greater)

Let X be a set
Let f:X\to power_set(X)
Then \neg(is_surjection(f))






CONSTRUCTION AND BASIC PROPERTIES OF THE INTEGERS

Comment: I don't expect the construction of \Z from \N to be used by the program, except in proofs of the basic properties.

Let a\in\N
Let b\in\N
Let c\in\N
Let d\in\N
Let e\in\N
Lef f\in\N
Suppose a + d = b + c
Then 

"The equivalence relation on \N \times \N used to define \Z" (equivrel_pairs_nat)

Let \sim be a relation on \N\times\N
Suppose \forall a\in\N \forall b\in\N \forall c\in\N \forall d\in\N (a,b) \sim (c,d) \iff a + d = b + c
Then equivalence_relation(\sim)

"Construction of \Z from \N"  (int_def)

Let \sim be a relation on \N\times\N
Suppose \forall a\in\N \forall b\in\N \forall c\in\N \forall d\in\N (a,b) \sim (c,d) \iff a + d = b + c
Definition: \Z = (\N \times \N)/\sim

"Definition of addition on \Z" (add_int)

Let \sim be a relation on \N\times\N
Suppose \forall a\in\N \forall b\in\N \forall c\in\N \forall d\in\N(a,b) \sim (c,d) \iff a + d = b + c
Let q = quotientmap(\N\times\N, \sim)
Let x\in\N
Let y\in\N
Let z\in\N
Let w\in\N
Definition: equivalence_class((x,y),\sim) + equivalence_class((z,w),\sim) = equivalence_class((x+z,y+w),\sim)


DIVISIBILITY

"Definition of divisor relation" (divides_def)

Let a\in\N
Let b\in\N
Definition: a | b ⟷ \exists m\in\N  b = m * a
