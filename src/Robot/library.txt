
# Elementary material on sets


https://www.cl.cam.ac.uk/research/hvg/Isabelle/dist/library/HOL/HOL/Set.html

Please note: I have kept the names from the HOL Library in the parentheses for easy reference. Please keep these.
The actual names are in " " : these need to be specified or modified.

TIM: To avoid confusion I am going to add phrases that I shall call "pointers". (There may be a better name, in which case I'm happy to change to that, but this is the best I have come up with in a couple of seconds. The idea of a pointer is that it lets the reader know what result is being used. Not all results need pointers, since some are considered too obvious to need comment. For example, with the first one, if we had that a \in \{x. Px\} and deduced that Pa, we would not feel the need to tell the reader that we were using a basic definition of naive set theory. In such cases, rather than putting an empty pointer, I shall simply not put a pointer. I shall enclose pointers in single inverted commas, to distinguish them from names.

I shall also add comments. These are not meant to be part of the library file. They are just questions that arise as I go along.

General comment: I assume that the format of these entries is closely modelled on Isabelle. I think we need to discuss a bit more what format we want to use. For example, you use words like "If", "Then" and "Let". Maybe this is fine and makes the library more human-readable, and maybe some parser can take results in that kind of format and turn them into more of a tableau format. Maybe that's even what we agreed we would do. An alternative would be to write them in tableau format in the first place, with a line that separates hypotheses and conclusions, and no need for those words. It isn't clear to me what is best.


"Definition of set"  (CollectI, CollectD)

$P a ⟷  a \in \{x. P x\}$
 

"Set equality" (Collect_cong)

If  $\forall x. (P x =  Q x)$
Then $\{x. P x \} = \{x. Q x \}$

Comment: Human mathematicians would not express the statement that P and Q are equivalent by writing P x = Q x. Thinking of a proposition as a function to Bool is quite a computery thing to do (even if in some ways it is quite nice). So I would favour writing P x ⟷ Q x or something similar, as I think that is more likely to match what comes up in problem states. (A more minor point is whether we want ⟷ or <=> or maybe even both.) 
  
  
 "Set equality by extensionality" (set_eqI, set_eq_iff) 

Let $A$ be a set
Let $B$ be a set
Then $\forall x. (x \in A ⟷ x \in B)$ iff $A = B$

Pointer: 'by the definition of set equality'.

Comment: I think we should not have the "if" direction in the library. It is most unlikely we would ever use it, and if we did, it would follow from the more general principle that equal objects can be substituted for each other. (A possible counterargument is that if we explicitly record that we have an equivalence, then the program will know that using this result is guaranteed to be safe. I'm not convinced that that is a strong enough argument, but it's worth bearing in mind.)

"Two sets are equal if each is a subset of the other  " (set_eq_subset)
Let $A$ be a set
Let $B$ be a set
Then $A = B$ iff $A \subseteq B \and B \subseteq A$

Pointer: 'by the definition of set equality'.

Comment: I don't think it matters if we have the same pointer for two different results. Also, again here I think we should keep just the interesting direction, so I would replace "iff" by "if". 
 
  "Definition of set intersection"  (Int_def)

Let $A$ be a set
Let $B$ be a set
Then $A \intersection B = \{x. x \in A \and x \in B \}$

Pointer: probably not needed here, but if we had a dial that let the user specify how explicit the write-up should be, then maybe we could have a pointer 'by the definition of set intersection' to be used only in very explicit write-ups. 

"Definition of set intersection" (Int_Iff and Int_I)

Let $A$ be a set
Let $B$ be a set
Then $c \in A \intersection B$  iff  $c \in A \and c \in B$

Pointer: same remark as above.

                                   
"Definition of set intersection" (IntD1 )

Let $A$ be a set
Let $B$ be a set
Let $c \in A \intersection B$ 
Then $c \in A$      

Comment: My instinct is that this should not be in the library. Also, I don't think it *is* the definition of set intersection, so much as a trivial consequence of the definition. The reason I think it shouldn't be in the library is that if we had the statement $c \in A \intersection B$, then we could obtain the hypothesis $c \in A$ by expanding using the previous result. On the other hand, I would not be against including the following result, which says essentially the same.

Let $A$ be a set
Let $B$ be a set
Then $(A \intersection B) \subset A$

The rationale for including this would be that it would enable the program to engage in high-level reasoning using set-theoretic operations rather than having to expand down and use elements. 

"Definition of set intersection" (IntD2 )

Let $A$ be a set
Let $B$ be a set
Let $c \in A \intersection B $
Then $c \in B$      

Comment: Similarly, I would replace this by $(A \intersection B) \subset B$. 

Comment about next few definitions: My reactions are the same, with obvious modifications, as my reactions to the results about intersections.


"Definition of set union"  (Un_def}
 
Let $A$ be a set
Let $B$ be a set
Then  $A \union B = \{x. x \in A \or x \in B \}$
  
 
 "Definition of set union" (Un_iff [simp])

Let $A$ be a set
Let $B$ be a set
Then $c \in A \union B$ iff  $c \in A \or c \in B$

"Definition of set union" ( UnI1 [elim?]) 

Let $A$ be a set
Let $B$ be a set
Let $c \in A$
Then $c \in A \union B$
  
"Definition of set union" ( UnI2 [elim?]) 

Let $A$ be a set
Let $B$ be a set
Let $c \in B$
Then $c \in A \union B$


 "Definition of set difference" (Diff_iff [simp])

Let $A$ be a set
Let $B$ be a set
Then  $c \in A \setminus B$ iff $c \in A \and c \notin B$

"Definition of set difference " ( DiffD1 )

Let $A$ be a set
Let $B$ be a set
Let $c \in A \setminus B$
Then $c \in A$


"Definition of set difference " (set_diff_eq)

Let $A$ be a set
Let $B$ be a set
Then $A \setminus B = \{x. x \in A \and x \notin B \}$

"Definition of image of a set under a function" (image)

Let $A$ be a set
Let $f$ be a function 
Define $f ` A := \{y. \exists x \in A. y = f x \}$

Comment: We need to decide on a convention here. Is it necessary/useful to label results explicitly as definitions by using the word "Define" and writing := or can we just stick with =? It isn't clear to me whether it was a carefully considered choice to use "Define" here and not, for example, for the definitions of the set operations above. Another question is whether we want to use the $f ` A$ notation. It certainly has some advantages, as it stops the program having to disambiguate. But for the output that the reader sees, I would prefer to see the more conventional notation $f(A)$. (What appears in the problem states as opposed to the accompanying natural-langage output is a different matter, and I'm not sure what would be best.)

Second comment: Do we not need to specify the domain and range of f? I think of this as a definition to be applied when f:X->Y and A is a subset of X. This comment applies to several of the results below as well.


 "Definition of image of a set under a function " (imageI)

Let $A$ be a set
Let $f$ be a function 
Assume $x ∈ A$ 
Then $f x \in  f ` A$
 
"Basic property of the image of the union of two sets under a function"  (image_Un)

Let $A$ be a set
Let $B$ be a set
Let $f$ be a function
Then $f ` (A \cup B) = f ` A \cup f ` B$

Low-priority pointer: 'since taking an image preserves unions'.

"Basic property of the image of a set under a function "  (image_iff)

Let $A$ be a set
Let $f$ be a function
Then $z \in f ` A$  iff $\exists x \in A. z = f x$

Low-priority pointer: 'by the definition of f ` A'.
  
"Basic property of the image of a set under a function " (image_subsetI) 

Let $A$ be a set
Let $B$ be a set
Let $f$ be a function
Assume $ \forall x \in A.  f x \in B$ 
Then $f ` A \subseteq B$

Comment: This is another result that I think might not be wanted in the library. Suppose, for example, that we found ourselves wanting to prove that $f ' A \subseteq B$. This result would tell us that we could replace the target by $ \forall x \in A. f x \in B$. But we would get that by first expanding, which would replace the target by $y \in f ` A \implies y \in B$ and then by expanding again to get $(\exists x. x \in A \wedge f(x) = y) \implies y \in B$, which after tidying becomes $\forall x. (x \in A \wedge f x = y) \implies y \in B$ and finally after further tidying (to remove the redundant y) $\forall x. x\in A \implies f x \in B$. All these moves would I think be done with no difficulty by the program, so the library result would not be helping, except that it would be doing all these easy steps in one go. But that I think might be a question more about the write-up -- yes, we don't want a write-up that is full of boring tidying steps, but I think we can find ways of judging which steps fall into that category and omitting them from the write-up. Again, I think this is something we will all need to discuss.


"Basic property of the image of a set under a function "  (subset_image_iff)

Let $A$ be a set
Let $B$ be a set
Let $f$ be a function
Then $B \subseteq f ` A $ iff $ \exists C \subseteq A. B = f ` C $

Comment: This again feels like a result that we might not want. I can't see when it might be used, and if it was needed, it would feel more humanly natural to prove it rather than to quote it. On the other hand, we might want a result

  $B \subset f ` A \implies B = f ` f^{-1}(B)$  
  
I'm not sure how we will notate inverse images there. 
 
"The image of the empty set under a function is the empty set" (image_empty [simp])

Let $f$ be a function
Then $f ` \emptyset = \emptyset$


"The image of a set under a function is the empty set iff the set is the empty set " (image_is_empty [iff])

Let $f$ be a function
Let $A$ be a set

Then $f ` A = \emptyset$ iff $A = \emptyset$

Comment: It seems strange to have a library result of the form P => Q and then another one of the form P <=> Q for the same P and Q. I would suggest replacing this one by just the "only if" part. And after that change I would suggest the following pointer.

Pointer: 'since the image of a non-empty set is non-empty'.


 "Equal sets under equal functions have equal images"  (image_cong)
 
Let $f$ be a function
Let $g$ be a function
Let $A$ be a set
Let $B$ be a set

Assume $A = B$ 
Assume $\forall x \in B. f x = g x$
Then  $f ` A = g ` B$

Comment: This feels like a result we don't obviously want. In particular, I think having two objects and hypothesizing that they are equal shouldn't be necessary -- I would hope that our program could handle equality well enough not to need help from the library of this kind. But if someone can think of a situation where this library result might make it easier for a program to find a proof, I might change my mind, but I can't think of one.


"Basic property of the image of the intersection of two sets under a function" (image_Int_subset)

Let $f$ be a function
Let $A$ be a set
Let $B$ be a set
Then $f ` (A \cap B) \subseteq f ` A \cap f ` B$

Minor comment: I think the name you've given here is a little uninformative, given that the result is slightly non-trivial. Maybe "The image of an intersection is contained in the intersection of the images" would be better. I have a similar minor comment for the next result.

 "Basic property of the set difference of the images of two sets under a function"      (image_diff_subset)

 Let $f$ be a function
 Let $A$ be a set
 Let $B$ be a set
 Then $f ` A \setminus f ` B \subseteq f ` (A \setminus B)$
 

 "Strict subset definition " (psubset_eq)
 
 Let $A$ be a set
 Let $B$ be a set
 Then $A \subset B$ iff $A \subseteq B  \and A \neq B$
 
 Comment: I favour using \subset for the subset relation and \subsetneq for proper subsets. This is more in accordance with what most mathematicians do in their papers.


 "Strict subset definition "    (psubset_imp_subset)

 Let $A$ be a set
 Let $B$ be a set
 Assume $A \subset B$
 Then $A \subseteq B$
 
 Comment: I'm genuinely unclear about whether we would want this result in the library. The argument in favour would be that it helps the program do a step automatically that it would otherwise have to do via a simple argument. The argument against would be that this follows too easily from the definition: we expand the definition of proper subset and obtain two statements, one of which we can just ignore. And suppose we had a target to prove that some set A is a subset of another set B. It would be peculiar to use backwards library reasoning to replace that by the target of proving that A is a proper subset of B.
 
"Transitivity of subset relation" (psubset_trans)

 Let $A$ be a set
 Let $B$ be a set
 Let $C$ be a set
 Assume $A \subset B$
 Assume  $B \subset C$
 Then $A \subset C$
  
"Subset definition " (psubsetD)

 Let $A$ be a set
 Let $B$ be a set
 Assume $A \subset B$
 Let $c \in A$
 Then $c \in B$
 
 Comment: It's not completely clear to me what your naming convention is. This I would regard as a trivial consequence of the definition but not as the definition itself. But maybe that is why you use this name. Incidentally, this result I definitely do think should belong to the library, since it enables the program to deduce from x \in A and A \subset B that x\in B without the need to expand A \subset B. And that is something that human mathematicians do all the time.


"Transitivity of subset relation"  (psubset_subset_trans)
 
 Let $A$ be a set
 Let $B$ be a set
 Let $C$ be a set
 Assume $A \subset B$
 Assume  $B \subseteq C$
 Then $A \subset C$

"Transitivity of subset relation"  (subset_psubset_trans)

 Let $A$ be a set
 Let $B$ be a set
 Let $C$ be a set
 Assume $A \subseteq B$
 Assume  $B \subset C$
 Then $A \subset C$


  
"Definition of strict subset relation and definition of set difference" (psubset_imp_ex_mem)

 Let $A$ be a set
 Let $B$ be a set
 Assume $A \subset B$
 Then $\exists b. b \in B \setminus A"
 
Pointer: 'since A is a strict subset of B'.

# Topological spaces (by Bill)
Note by Angeliki: made minor changes in notation

"Definition of open_in for a topological space"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Define $open_in(U, \tilde{X}) := U \in \tau$

Low-priority pointer: 'by the definition of open sets'.
   
"Definition of closed_in for a topological space"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Define $closed_in(F, \tilde{X}) := open_in(X \setminus F, \tilde{X})$

Low-priority pointer: 'by the definition of closed sets'.

Comment: It might be useful to have an alternative definition that F is closed if its complement belongs to \tau.

"Open set iff closed complement"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Then $open_in(U, \tilde{X})$
iff $closed_in(X \setminus U, \tilde{X}$

Pointer: 'since a set is closed if and only if its complement is open'.

"Empty set is open in a topological space"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Then $open_in(\emptyset, \tilde{X})$

Pointer: 'since the empty set is open'.

"Empty set is closed in a topological space"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Then $closed_in(\emptyset, \tilde{X})$

Pointer: 'since the empty set is closed'.

"Underlying set of topological space is open"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Then $open_in(X, \tilde{X})$

Pointer: 'since $X$ is open in itself'.

"Underlying set of topological space is closed"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Then $closed_in(X, \tilde{X})$

Pointer: 'since $X$ is closed in itself'.

"Empty set is element of a topology on a topological space"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Then $\emptyset \in \tau$

Pointer: 'since the empty set belongs to $\tau$'.

"Underlying set of topological space is element of its topology"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
Then $X \in \tau$

Pointer: 'since $X$ belongs to $\tau$'.

"Intersection of open sets is open"

Let $X$ be a set
Let $\tau$ be a topology on $X$
Let $\tilde{X} := (X, \tau)$ be a topological space
If $open_in(U, \tilde{X})$ and $open_in(V, \tilde{X})$
then $open_in(U \cap V, \tilde{X})$

Pointer: 'since the intersection of two open sets is open'.

"Finite intersection of open sets is open"

Let $\Gamma$ be a set
Suppose $\Gamma$ is finite
Let $U : \Gamma \to power_set(X)$
If $\forall \gamma \in \Gamma . open_in(U(\gamma), \tilde{X})$
then $open_in(\bigcap_{\gamma\in\Gamma} U(\gamma), \tilde{X})$

Pointer: 'since the intersection of finitely many open sets is open'.

"Finite union of closed sets is closed"

Let $\Gamma be a set
Suppose $\Gamma$ is finite
Let $F : \Gamma \to power_set(X)$
If $\forall \gamma \in \Gamma . closed_in(F(\gamma), \tilde{X})$
then $closed_in(\bigcup_{\gamma\in\Gamma} F(\gamma), \tilde{X})$

Pointer: 'since the union of finitely many closed sets is closed'.

"Union of open sets is open"

Let $\Gamma$ be a set
Let $U : \Gamma \to power_set(X)$
If $\forall \gamma \in \Gamma . open_in(U(\gamma), \tilde{X})$
then $open_in(\bigcup_{\gamma\in\Gamma} U(\gamma), \tilde{X})$

Pointer: 'since a union of open sets is open'.

"Intersection of closed sets is closed"

Let $\Gamma$ be a set
Let $F : \Gamma \to power_set(X)$
If $\forall \gamma \in \Gamma . closed_in(F(\gamma), \tilde{X})$
then $closed_in(\bigcap_{\gamma\in\Gamma} F(\gamma), \tilde{X})$ 

Pointer: 'since an intersection of closed sets is closed'.
